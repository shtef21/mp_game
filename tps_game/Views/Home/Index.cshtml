@{
    ViewData["Title"] = "Home Page";
}

<style>

    #logContainer {
        width: 100%;
        max-width: 800px;
        max-height: 500px;
        overflow-y: scroll;
        margin: 0 auto;
    }

    #ulLog li {
        background: #292d3f;
        color: #c2e884;
        padding: 5px;
        border-radius: 5px;
        margin-bottom: 5px;
        overflow-x: scroll;
    }

    #gameCanvasContainer {
        margin-top: 15px;
    }

    #gameCanvasContainer:focus, #gameCanvasContainer *:focus {
        outline: none;
    }

    #playersContainer {
        font-family: monospace;
        font-size: 1rem;
        margin: 0 auto;
    }

    #ulPlayers > li {
        margin-bottom: 5px;
    } 

    #playersContainer .player-color {
        display: inline-block;
        min-width: 25px;
        text-align: center;
        font-size: 1.2rem;
        font-weight: 600;
        padding: 0 5px;
        border-left: 2px solid transparent;
        border-top: 2px solid transparent;
        border-right: 2px solid rgba(0, 0, 0, 0.5);
        border-bottom: 2px solid rgba(0, 0, 0, 0.5);
    }

    #bLeft {
        /*margin-right: -4px;*/
    }

    #bUp {
        position: absolute;
        top: 0;
        left: 50%;
        width: 500px;
        transform: translateX(-50%);
    }

    #bDown {
        position: absolute;
        bottom: 0;
        left: 50%;
        width: 500px;
        transform: translateX(-50%);
    }

    #bRight {
        /*margin-left: -4px;*/
    }
</style>

<div id="mainHeading" class="text-center mt-4">
    <h1 class="text-[2rem] font-bold">Welcome to the MP Game</h1>
</div>

<!-- Login form -->
<div id="loginForm">
    <form class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
        <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="username_i">
                Username
            </label>
            <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="username_i" type="text" placeholder="Username">
        </div>
        <div class="flex items-center justify-between">
            <button id="signInButton" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline disabled:opacity-75" type="button" disabled onclick="connect()">
                Connect
            </button>
        </div>
    </form>
</div>

<!-- GAME -->
<div id="gameCanvasContainer" class="relative py-[48px] mb-[25px] mx-auto text-center hidden">

    <!-- Left -->
    <button id="bLeft" class="bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded" data-move="A">
        <i class="fa-solid fa-arrow-left"></i>
    </button>

    <!-- Up -->
    <button id="bUp" class="bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded" data-move="W">
        <i class="fa-solid fa-arrow-up"></i>
    </button>

    <canvas id="gameCanvas" class="inline-block" style="margin: 0 auto;" tabindex="0"></canvas>

    <!-- Down -->
    <button id="bDown" class="bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded" data-move="S">
        <i class="fa-solid fa-arrow-down"></i>
    </button>

    <!-- Right -->
    <button id="bRight" class="bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded" data-move="D">
        <i class="fa-solid fa-arrow-right"></i>
    </button>

</div>

<!-- Players list -->
<div id="playersContainer">
    <ul id="ulPlayers"></ul>
</div>

<!-- Logs -->
<div id="logContainer" class="px-3 hidden">
    <h3>
        Logs (<span id="logCount">1</span>):
    </h3>
    <ul id="ulLog" class="list-none">
        <li>
            1. <strong><pre class="inline">Logs go here</pre></strong>
        </li>
    </ul>
</div>

<script>

    var socket = null;
    var ctx = gameCanvas.getContext("2d");
    let pid = null; // Player's PID

    function addLog(txt) {
        let log = document.createElement('pre');
        let item = document.createElement('li');

        log.classList.add('inline');
        log.innerText = txt;
        item.innerText = (ulLog.children.length + 1) + '. ';
        item.insertAdjacentHTML('beforeend', '<strong>' + log.outerHTML + '</strong>');

        ulLog.insertAdjacentElement('afterbegin', item);
        logCount.innerText = ulLog.children.length;
    }

    // Connect web socket
    function connect() {

        const myUsername = username_i.value;
        var protocol = 'wss://';
        var usernameComponent = '?username=' + encodeURIComponent(myUsername);
        
        if (location.protocol !== 'https:') {
            protocol = 'ws://';
        }
        let wsUrl = protocol + location.host + usernameComponent;
        socket = new WebSocket(wsUrl);

        socket.addEventListener('open', function(event) {

            addLog('Connected to ' + wsUrl);
            loginForm.classList.add('hidden');
            mainHeading.classList.add('hidden');
            gameCanvasContainer.classList.remove('hidden');

            // Setup movement

            bUp.onclick = bLeft.onclick = bDown.onclick = bRight.onclick = function(event) {
                let button = event.target;
                if (button.tagName == 'I') {
                    button = button.parentElement;
                }
                socket.send(button.dataset.move);
            }
        });

        socket.addEventListener('message', function(event) {
            let logText = event.data;

            // Try to format as JSON
            try {
                logText = JSON.stringify(JSON.parse(logText), null, 2);
            }
            catch {}

            addLog('Message from server:\n' + logText);
            console.log(logText);
            handleMessage(event.data, myUsername);
        });

        socket.addEventListener('close', function(event) {
            addLog('Connection to ' + wsUrl + ' closed.');
            loginForm.classList.remove('hidden');
            mainHeading.classList.remove('hidden');
            gameCanvasContainer.classList.add('hidden');
            bUp.onclick = bLeft.onclick = bDown.onclick = bRight.onclick = null
        });
    }

    // Draw a map block
    function drawRectangle(y, x, blockSize, fillColor='black', innerBorder=false) {
        
        // First draw the rectangle
        ctx.fillStyle = fillColor;
        ctx.fillRect(x * blockSize, y * blockSize, blockSize, blockSize);

        // Draw border
        ctx.beginPath();
        ctx.strokeStyle = 'rgba(0, 0, 0, 0.1)';
        ctx.lineWidth = 1;
        ctx.rect(x * blockSize, y * blockSize, blockSize, blockSize);
        ctx.stroke();

        // Red inner border marks the client from his or her enemies
        if (innerBorder === true) {
            ctx.beginPath();
            ctx.strokeStyle = 'red';
            ctx.lineWidth = 2;
            ctx.rect(x * blockSize, y * blockSize + 1, blockSize - 1, blockSize - 2);
            ctx.stroke();
        }
    }

    // Clear all blocks from the map
    function clearCanvas() {
        ctx.clearRect(0, 0, gameCanvas.width, gameCanvas.height);
    }

    // Draw text on the map block
    function drawText(y, x, text, textSize, fillColor='black') {
        ctx.font = textSize + 'px Consolas';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillStyle = fillColor;
        ctx.fillText(text, x * textSize + textSize / 2, y * textSize + textSize / 2 + Math.floor((textSize * 0.075)));
    }

    // Hex number to decimal (used in hexColorToRgb)
    function hexToDecimal(hexNum) {
        return parseInt(hexNum, 16);
    }

    // Convert hex color to RGBA (used when displaying player's teritory blocks)
    function hexColorToRgb(hexColor, opacity='1.0') {
        let css = '';
        css += 'rgba(';
        css += hexToDecimal(hexColor.substring(1, 3)) + ', ';
        css += hexToDecimal(hexColor.substring(3, 5)) + ', ';
        css += hexToDecimal(hexColor.substring(5, 7)) + ', ';
        css += opacity + ')';
        return css;
    }


    function handleMessage(msg) {
        let obj = JSON.parse(msg);

        if (obj.type == 'ID') {
            pid = obj.ID;
        }
        else if (obj.type == 'summary') {

            // First show players count
            ulPlayers.innerHTML = '';
            for (let player of obj.players) {

                let playerLi = document.createElement('li');
                playerLi.classList.add('item-player');
                playerLi.innerText = player.username;
                playerLi.insertAdjacentHTML('afterbegin', '<span class="player-color" style="background: ' + player.color + '">' + player.territoryCount + '</span> ');

                ulPlayers.insertAdjacentElement('beforeend', playerLi);
            }

            // Now process the map

            let mapWidth = obj.mapWidth;
            let mapHeight = obj.mapHeight;
            let blockSize = gameCanvas.height / mapHeight; // Block size in pixels

            let currRow = 0;
            let rows = obj.map.split('\n');

            // Remove previous blocks before drawing new ones
            clearCanvas();
            
            // Iterate map rows
            for (let r of rows) {

                let currCol = 0;
                let cols = r.split(' ');

                // Iterate row blocks
                for (let c of cols) {
                    
                    // Default terrain color
                    let blockColor = 'lightblue';

                    // Try to check if this block has a custom color
                    if (c.includes('-')) {
                        blockColor = c.split('-')[2];
                    }

                    if (c == 'x') {
                        // No man's land
                        drawRectangle(currRow, currCol, blockSize, blockColor);
                    }
                    else if (c.split('-')[0] == 'p') {
                        
                        if (c.split('-')[1] == pid) {
                            // Player's main block
                            drawRectangle(currRow, currCol, blockSize, blockColor, true);
                        }
                        else {
                            // Enemies' main block
                            drawRectangle(currRow, currCol, blockSize, blockColor);
                        }

                        // If this player is onturn, show turn count
                        if (c.split('-')[1] == obj?.turn?.playerID) {
                            drawText(currRow, currCol, obj.turn.movesLeft, blockSize);
                        }
                    }
                    else if (c.split('-')[0] == 't') {
                        
                        // Teritory blocks, drawn with 50% opacity
                        if (c.split('-')[1] == pid) {
                            // Player teritory
                            drawRectangle(currRow, currCol, blockSize, hexColorToRgb(blockColor, 0.5));
                        }
                        else {
                            // Enemy teritory
                            drawRectangle(currRow, currCol, blockSize, hexColorToRgb(blockColor, 0.5));
                        }
                    }
                    currCol++;
                }
                currRow++;
            }
        }
    }

    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {

        // Initialize the input form
        username_i.value = '';
        username_i.addEventListener('keyup', function() {
            if (username_i.value.length > 2) {
                signInButton.disabled = false;
            }
            else {
                signInButton.disabled = true;
            }
        });

        // Initialize onclicks
        document.addEventListener('keydown', function (event) {

            if (event.target == gameCanvasContainer || gameCanvasContainer.contains(event.target)) {
                // Click inside game area detected

                addLog('Key code: ' + event.keyCode);

                if (gameCanvasContainer.classList.contains('hidden') == false) {
                    // Game is active

                    if (event.keyCode == 87 || event.keyCode == 38) {
                        socket.send('W'); // W or arrow up
                    }
                    else if (event.keyCode == 65 || event.keyCode == 37) {
                        socket.send('A'); // A or arrow left
                    }
                    else if (event.keyCode == 83 || event.keyCode == 40) {
                        socket.send('S'); // S or arrow down
                    }
                    else if (event.keyCode == 68 || event.keyCode == 39) {
                        socket.send('D'); // D or arrow right
                    }
                }
            }
        });

        // Setup canvas
        let cWidth = 250;
        let cHeight = 250;
        gameCanvas.width = cWidth;
        gameCanvas.height = cHeight;
        gameCanvasContainer.style.minWidth = (cWidth + 2 * 50 + 50) + 'px';
        gameCanvasContainer.style.maxWidth = '1200px';
        bLeft.style.height = cHeight + 'px';
        bRight.style.height = cHeight + 'px';
        bUp.style.width = (cWidth + 2 * 50) + 'px';
        bDown.style.width = (cWidth + 2 * 50) + 'px';

        // Player list display
        playersContainer.style.width = (cWidth + 2 * 50) + 'px';
        

        // Only show logs on localhost
        if (location.hostname == 'localhost') {
            logContainer.classList.remove('hidden');
        
            // Try to login with 'test'
            username_i.value = 'test';
            connect();
        }

    });

</script>